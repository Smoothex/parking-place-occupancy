plugins {
	id 'java'
	id 'org.springframework.boot' version('3.2.2')
	id 'io.spring.dependency-management' version('1.1.4')
	id 'org.hibernate.orm' version('6.4.4.Final')
}

group = 'org.gradle'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation ('org.springframework.boot:spring-boot-starter')
	implementation ('org.springframework.boot:spring-boot-starter-web')
	developmentOnly ('org.springframework.boot:spring-boot-docker-compose')
	implementation ('org.springframework.boot:spring-boot-starter-data-jpa') // Spring will automatically create a DataSource when a JPA is included (https://www.baeldung.com/the-persistence-layer-with-spring-and-jpa)
	testImplementation ('org.springframework.boot:spring-boot-starter-test')
	runtimeOnly 'org.postgresql:postgresql:42.7.2'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.16.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.16.1'
	compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'
	implementation ('org.hibernate.orm:hibernate-spatial')
	implementation ('org.hibernate.orm:hibernate-core')
	implementation 'com.opencsv:opencsv:5.9'
	implementation 'org.apache.commons:commons-io:1.3.2'
	implementation 'org.locationtech.jts:jts-core:1.19.0'
}

tasks.named('test') {
	useJUnitPlatform()
}
